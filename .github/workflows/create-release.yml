name: Create release

on:
  workflow_call:
    inputs:
      version:
        description: 'Semantic version of the release (eg. v1.2.3 or v1.2.3-alpha.1)'
        required: true
        type: string
      repository:
        description: 'The repository where the release should be created'
        required: false
        default: ${{ github.repository }}
        type: string
      ref:
        description: 'The branch or SHA for the release (defaults to main)'
        required: false
        default: ${{ github.ref }}
        type: string
    secrets:
      token:
        description: 'The token to use when interacting with GitHub'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Verify tag is semver
        run: |
          set -x
          if [[ ! "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "This is not a semver compliant tag"
            echo "Exiting"
            exit 1
          fi

          if [[ "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.0$ ]]; then
            echo "is_dotzero=true" >> $GITHUB_OUTPUT
          else
            echo "is_dotzero=false" >> $GITHUB_OUTPUT
          fi

          XY_VERSION=$(echo ${{ inputs.version }} | awk -F. '{print substr($1,2)"."$2}')
          echo "xy_version=${XY_VERSION}" >> $GITHUB_OUTPUT
        id: check_tag

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          path: ${{ inputs.repository }}
          token: ${{ secrets.token }}

      - name: Find previous release
        working-directory: ./${{ inputs.repository }}
        run: |
          set -x
          CURRENT_XY=${{ steps.check_tag.outputs.xy_version }}

          # When we are dealing with a version that is NOT pre-release,
          # we should be generating the changelong against the closest NOT pre-release.
          if [[ "${{ steps.check_tag.outputs.is_prerelease }}" = "true" ]]; then
            CLOSEST_TAG=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 --first-parent)
            CLOSEST_XY=$(echo ${CLOSEST_TAG} | awk -F. '{print substr($1,2)"."$2}')
          else
            CLOSEST_TAG=$(git describe --tags --match "v[0-9]*\.[0-9]*\.[0-9]*" --exclude "*-[\!0-9]*" --abbrev=0 --first-parent)
            CLOSEST_XY=$(echo ${CLOSEST_TAG} | awk -F. '{print substr($1,2)"."$2}')
          fi

          # Check to see if the nearest tag is a full release, only if we have
          # changed the XY. So, if the version we are releasing is v0.4.1 and
          # the closest tag is v0.4.0 (obviously), then we don't need to
          # traverse release-0.4 to determine that v0.4.0 is the correct
          # CLOSEST_TAG.
          if [[ "$CURRENT_XY" != "$CLOSEST_XY" && "$CLOSEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            CLOSEST_TAG=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 --first-parent "origin/release-${CLOSEST_XY}")
          fi

          echo "tag=${CLOSEST_TAG}" >> $GITHUB_OUTPUT
        id: prev_tag

      - name: Make changelog
        working-directory: ./${{ inputs.repository }}
        if: ${{ steps.prev_tag.outputs.tag != inputs.version }} # We should skip this if the last tag is the current version
        run: |
          set -x
          PREV_TAG=${{ steps.prev_tag.outputs.tag }}
          filterfunc() { git log --pretty=format:%s ${PREV_TAG}..${{ inputs.version }} | grep "\s*:$1:" | sed "s/^\s*:$1:\s*/ * /"; }
          RELEASE_DOC="${PWD}/release.md"
          echo "release_doc=${RELEASE_DOC}" >> $GITHUB_ENV

          echo "Changes since [${PREV_TAG}](https://github.com/${GITHUB_REPOSITORY}/releases/${PREV_TAG})" >> ${RELEASE_DOC}
          echo "" >> ${RELEASE_DOC}

          BREAKING_CHANGES="$(filterfunc warning)"
          if [ -n "${BREAKING_CHANGES}" ]; then
            echo "## :warning: Breaking Changes" >> ${RELEASE_DOC}
            echo "${BREAKING_CHANGES}" >> ${RELEASE_DOC}
            echo "" >> ${RELEASE_DOC}
          fi

          FEATURE_CHANGES="$(filterfunc sparkles)"
          if [ -n "${FEATURE_CHANGES}" ]; then
            echo "## :sparkles: Features" >> ${RELEASE_DOC}
            echo "${FEATURE_CHANGES}" >> ${RELEASE_DOC}
            echo "" >> ${RELEASE_DOC}
          fi

          BUG_FIXES="$(filterfunc bug)"
          if [ -n "${BUG_FIXES}" ]; then
            echo "## :bug: Bug Fixes" >> ${RELEASE_DOC}
            echo "${BUG_FIXES}" >> ${RELEASE_DOC}
            echo "" >> ${RELEASE_DOC}
          fi

          # TODO(djzager): More? could make this workflow accept as an argument whether or not
          # to include other types (ie. seedling, docs)
        id: changelog

      - uses: ncipollo/release-action@v1
        if: ${{ steps.prev_tag.outputs.tag != inputs.version }} # We should skip this if the last tag is the current version
        with:
          tag_name: ${{ inputs.version }}
          bodyFile: ${{ env.release_doc }}
          draft: false
          prerelease: ${{ steps.check_tag.outputs.is_prerelease }}
          token: ${{ secrets.token }}

      - name: Create release branch
        if: ${{ steps.check_tag.outputs.is_dotzero == 'true' && steps.prev_tag.outputs.tag != inputs.version }}
        working-directory: ./${{ inputs.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          git config user.name "Konveyor Release Tools"
          git config user.email "konveyorio@gmail.com"

          set -x
          git checkout -b release-${{ steps.check_tag.outputs.xy_version }}
          git push origin release-${{ steps.check_tag.outputs.xy_version }}
